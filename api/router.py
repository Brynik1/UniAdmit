from fastapi import Depends, HTTPException, APIRouter
from sqlalchemy.orm import Session

from database import db_manager
from database.queries import (
    get_faculty_students,
    get_student_grades,
    get_student_subject_schedule,
    get_group_schedule,
    get_faculty_rating,
    get_faculty_avg_grades,

    # –°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    get_faculties_with_students,
    get_students_sample,
    get_groups_sample,
    get_subjects_sample,
    get_faculties_count,
    get_students_count,
    get_groups_count,
    get_subjects_count
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = APIRouter()


@router.get("/")
async def root_api(db: Session = Depends(db_manager.get_db)):
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ API –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    faculties_with_students = get_faculties_with_students(db)
    students_sample = get_students_sample(db)
    groups_sample = get_groups_sample(db)
    subjects_sample = get_subjects_sample(db)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã URL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    faculty_example = faculties_with_students[0][0] if faculties_with_students else "–§–∞–∫—É–ª—å—Ç–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
    student_example = students_sample[0] if students_sample else ("–ò–≤–∞–Ω–æ–≤", "–ê–ª–µ–∫—Å–µ–π")
    group_example = groups_sample[0][0] if groups_sample else "–ü–ò-101"
    subject_example = subjects_sample[0][0] if subjects_sample else "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"

    example_urls = {
        "faculty_abiturients": f"/faculty/{faculty_example}/abiturients",
        "student_grades": f"/student/{student_example[0]}/{student_example[1]}/grades",
        "student_schedule": f"/student/{student_example[0]}/{student_example[1]}/schedule/{subject_example}",
        "group_schedule": f"/group/{group_example}/schedule",
        "faculty_rating": f"/faculty/{faculty_example}/rating",
        "faculty_avg_grades": f"/faculty/{faculty_example}/avg-grades"
    }

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    statistics = {
        "total_faculties": get_faculties_count(db),
        "total_students": get_students_count(db),
        "total_groups": get_groups_count(db),
        "total_subjects": get_subjects_count(db)
    }

    # –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    examples = {
        "available_faculties": [f[0] for f in faculties_with_students[:3]],
        "available_students": [{"last_name": s[0], "first_name": s[1]} for s in students_sample[:3]],
        "available_groups": [g[0] for g in groups_sample[:3]],
        "available_subjects": [s[0] for s in subjects_sample[:3]]
    }

    return {
        "message": "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º–∏!",
        "description": "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",
        "endpoints": {
            "1.": {
                "path": "/faculty/{faculty_name}/abiturients",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞",
                "example": example_urls["faculty_abiturients"]
            },
            "2.": {
                "path": "/student/{last_name}/{first_name}/grades",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞",
                "example": example_urls["student_grades"]
            },
            "3.": {
                "path": "/student/{last_name}/{first_name}/schedule/{subject_name}",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É",
                "example": example_urls["student_schedule"]
            },
            "4.": {
                "path": "/group/{group_name}/schedule",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –¥–ª—è —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã",
                "example": example_urls["group_schedule"]
            },
            "5.": {
                "path": "/faculty/{faculty_name}/rating",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ø–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤",
                "example": example_urls["faculty_rating"]
            },
            "6.": {
                "path": "/faculty/{faculty_name}/avg-grades",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ",
                "example": example_urls["faculty_avg_grades"]
            },
            "7.": {
                "path": "/",
                "description": "–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (—Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ)",
            }
        },
        "examples": examples,
        "statistics": statistics
    }


@router.get("/faculty/{faculty_name}/abiturients")
async def get_faculty_students_api(
        faculty_name: str,
        db: Session = Depends(db_manager.get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    """
    try:
        results = get_faculty_students(faculty_name, db)

        if not results:
            raise HTTPException(
                status_code=404,
                detail=f"–§–∞–∫—É–ª—å—Ç–µ—Ç '{faculty_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–∞ –Ω–µ–º –Ω–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤"
            )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
        abiturients = []
        for row in results:
            abiturients.append({
                "last_name": row.–§–∞–º–∏–ª–∏—è,
                "first_name": row.–ò–º—è,
                "patronymic": row.–û—Ç—á–µ—Å—Ç–≤–æ,
                "faculty": row.–§–∞–∫—É–ª—å—Ç–µ—Ç,
                "department": row.–ö–∞—Ñ–µ–¥—Ä–∞,
                "is_enrolled": row.–ó–∞—á–∏—Å–ª–µ–Ω == "–î–∞"
            })

        return {
            "faculty": faculty_name,
            "count": len(abiturients),
            "abiturients": abiturients
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@router.get("/student/{last_name}/{first_name}/grades")
async def get_student_grades_api(
        last_name: str,
        first_name: str,
        db: Session = Depends(db_manager.get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
    """
    try:
        results = get_student_grades(last_name, first_name, db)

        if not results:
            raise HTTPException(
                status_code=404,
                detail=f"–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç {last_name} {first_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            )

        grades = []
        for row in results:
            grades.append({
                "subject": row.–ü—Ä–µ–¥–º–µ—Ç,
                "grade": row.–û—Ü–µ–Ω–∫–∞,
                "exam_date": row.–î–∞—Ç–∞_—ç–∫–∑–∞–º–µ–Ω–∞.isoformat() if row.–î–∞—Ç–∞_—ç–∫–∑–∞–º–µ–Ω–∞ else None,
                "is_appeal": row.–ê–ø–µ–ª–ª—è—Ü–∏—è == "–î–∞"
            })

        return {
            "student": f"{last_name} {first_name}",
            "count": len(grades),
            "grades": grades
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@router.get("/student/{last_name}/{first_name}/schedule/{subject_name}")
async def get_student_subject_schedule_api(
        last_name: str,
        first_name: str,
        subject_name: str,
        db: Session = Depends(db_manager.get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
    """
    try:
        results = get_student_subject_schedule(last_name, first_name, subject_name, db)

        if not results:
            raise HTTPException(
                status_code=404,
                detail=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ {last_name} {first_name} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )

        schedule = []
        for row in results:
            schedule.append({
                "date": row.–î–∞—Ç–∞.isoformat() if row.–î–∞—Ç–∞ else None,
                "classroom": row.–ê—É–¥–∏—Ç–æ—Ä–∏—è,
                "type": row.–¢–∏–ø,
                "subject": row.–ü—Ä–µ–¥–º–µ—Ç
            })

        return {
            "student": f"{last_name} {first_name}",
            "subject": subject_name,
            "count": len(schedule),
            "schedule": schedule
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@router.get("/group/{group_name}/schedule")
async def get_group_schedule_api(
        group_name: str,
        db: Session = Depends(db_manager.get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –¥–ª—è —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã
    """
    try:
        results = get_group_schedule(group_name, db)

        if not results:
            raise HTTPException(
                status_code=404,
                detail=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )

        schedule = []
        for row in results:
            schedule.append({
                "date": row.–î–∞—Ç–∞.isoformat() if row.–î–∞—Ç–∞ else None,
                "classroom": row.–ê—É–¥–∏—Ç–æ—Ä–∏—è,
                "subject": row.–ü—Ä–µ–¥–º–µ—Ç,
                "type": row.–¢–∏–ø
            })

        return {
            "group": group_name,
            "count": len(schedule),
            "schedule": schedule
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@router.get("/faculty/{faculty_name}/rating")
async def get_faculty_rating_api(
        faculty_name: str,
        db: Session = Depends(db_manager.get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ø–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤
    """
    try:
        results = get_faculty_rating(faculty_name, db)

        if not results:
            raise HTTPException(
                status_code=404,
                detail=f"–†–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        rating = []
        for i, row in enumerate(results, 1):
            rating.append({
                "position": i,
                "last_name": row.–§–∞–º–∏–ª–∏—è,
                "first_name": row.–ò–º—è,
                "medal": row.–ú–µ–¥–∞–ª—å,
                "total_score": float(row.–°—É–º–º–∞_–±–∞–ª–ª–æ–≤) if row.–°—É–º–º–∞_–±–∞–ª–ª–æ–≤ else 0
            })

        return {
            "faculty": faculty_name,
            "count": len(rating),
            "rating": rating
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@router.get("/faculty/{faculty_name}/avg-grades")
async def get_faculty_avg_grades_api(
        faculty_name: str,
        db: Session = Depends(db_manager.get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ
    """
    try:
        results = get_faculty_avg_grades(faculty_name, db)

        if not results:
            raise HTTPException(
                status_code=404,
                detail=f"–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )

        avg_grades = []
        for row in results:
            avg_grades.append({
                "subject": row.–ü—Ä–µ–¥–º–µ—Ç,
                "avg_grade": float(row.–°—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª) if row.–°—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª else 0
            })

        return {
            "faculty": faculty_name,
            "count": len(avg_grades),
            "average_grades": avg_grades
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")