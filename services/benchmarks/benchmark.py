from time import perf_counter

import matplotlib.pyplot as plt

from core import config
from database import db_manager
from database.queries import (
    get_faculty_students,
    get_student_grades,
    get_student_subject_schedule,
    get_group_schedule,
    get_faculty_rating,
    get_faculty_avg_grades,
    get_faculties_with_students,
    get_students_sample,
    get_groups_sample,
    get_subjects_sample
)
from services.seeding import seeder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# TEST_SIZES = [100, 5000, 10000, 50000, 100000, 500000, 1000000]
TEST_SIZES = [100, 1000, 2000]
ITERATIONS = 3

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
benchmark_results = []


def prepare_database(size):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π"""
    print(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ë–î —Å {size} –∑–∞–ø–∏—Å—è–º–∏...")

    db_manager.drop_tables()
    db_manager.create_tables()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config.data.mode = 'bulk'
    config.data.student_count = size
    config.data.faculty_count = max(10, size // 100)
    config.data.school_count = max(10, size // 100)
    config.data.group_count = max(10, size // 50)
    config.data.stream_count = max(10, size // 50)
    config.data.subject_count = max(10, size // 100)
    config.data.batch_size = min(1000, size // 10)

    seeder.seed()

    return get_test_data()


def get_test_data():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö"""
    test_data = {}

    with db_manager.get_session() as session:

        faculties = get_faculties_with_students(session)
        test_data['faculties'] = [f[0] for f in faculties[:5]] if faculties else ["–§–∞–∫—É–ª—å—Ç–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"]

        students = get_students_sample(session)
        test_data['students'] = [{'last_name': s[0], 'first_name': s[1]} for s in students[:5]] if students else [
            {'last_name': '–ò–≤–∞–Ω–æ–≤', 'first_name': '–ê–ª–µ–∫—Å–µ–π'}]

        groups = get_groups_sample(session)
        test_data['groups'] = [g[0] for g in groups[:5]] if groups else ["–ü–ò-101"]

        subjects = get_subjects_sample(session)
        test_data['subjects'] = [s[0] for s in subjects[:5]] if subjects else ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]

    return test_data


def measure_query_time(query_func, *args, iterations=ITERATIONS, **kwargs):
    """–ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
    times = []

    for _ in range(iterations):
        start_time = perf_counter()

        with db_manager.get_session() as session:
            query_func(*args, session, **kwargs)

        execution_time = (perf_counter() - start_time) * 1000  # –º—Å
        times.append(execution_time)

    return sum(times) / iterations


def run_query_tests(size, test_data):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    queries = [
        {
            'name': '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞',
            'func': get_faculty_students,
            'args': [test_data['faculties'][0]],
            'kwargs': {'limit': 5}
        },
        {
            'name': '–û—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞',
            'func': get_student_grades,
            'args': [
                test_data['students'][0]['last_name'],
                test_data['students'][0]['first_name']
            ],
            'kwargs': {'limit': 5}
        },
        {
            'name': '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É',
            'func': get_student_subject_schedule,
            'args': [
                test_data['students'][0]['last_name'],
                test_data['students'][0]['first_name'],
                test_data['subjects'][0]
            ],
            'kwargs': {'limit': 5}
        },
        {
            'name': '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã',
            'func': get_group_schedule,
            'args': [test_data['groups'][0]],
            'kwargs': {'limit': 5}
        },
        {
            'name': '–†–µ–π—Ç–∏–Ω–≥ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞',
            'func': get_faculty_rating,
            'args': [test_data['faculties'][0]],
            'kwargs': {'limit': 5}
        },
        {
            'name': '–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞',
            'func': get_faculty_avg_grades,
            'args': [test_data['faculties'][0]],
            'kwargs': {'limit': 5}
        }
    ]

    for query in queries:
        try:
            result = measure_query_time(query['func'], *query['args'], **query['kwargs'])

            benchmark_results.append({
                'size': size,
                'query': query['name'],
                'result': result
            })

            print(f"   ‚úÖ {query['name']}: {result:.2f} –º—Å")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ '{query['name']}': {e}")


def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –±–µ–Ω—á–º–∞—Ä–∫–∞"""

    # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
    print("\nüìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –º—Å)\n")
    print("=" * 85)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
    header = f"{'–ó–ê–ü–†–û–°':<40}"
    for size in TEST_SIZES:
        header += f" | {f'{size} –∑–∞–ø.':>12}"
    print(header)
    print("-" * 200)

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
    unique_queries = sorted(set(r['query'] for r in benchmark_results))

    for query in unique_queries:
        row = f"{query:<40}"

        for size in TEST_SIZES:
            # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
            result = next((r for r in benchmark_results
                           if r['size'] == size and r['query'] == query), None)

            if result:
                row += f" | {result['result']:>12.2f}"
            else:
                row += f" | {'N/A':>12}"

        print(row)


def run_benchmarks():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ó–ê–ü–£–°–ö –ë–ï–ù–ß–ú–ê–†–ö-–¢–ï–°–¢–û–í")
    print("=" * 50)

    for size in TEST_SIZES:
        print(f"\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê {size} –ó–ê–ü–ò–°–Ø–•")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = prepare_database(size)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        run_query_tests(size, test_data)


def plot_performance_charts():
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    plt.figure(figsize=(14, 8))

    unique_queries = sorted(set(r['query'] for r in benchmark_results))
    sizes = sorted(set(r['size'] for r in benchmark_results))

    # –ì—Ä–∞—Ñ–∏–∫: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    for query in unique_queries:
        times = []
        valid_sizes = []
        for size in sizes:
            result = next((r for r in benchmark_results
                           if r['size'] == size and r['query'] == query), None)
            if result:
                times.append(result['result'])
                valid_sizes.append(size)

        if times:
            plt.plot(valid_sizes, times, marker='o', linewidth=2, markersize=6,
                     label=query[:25] + '...' if len(query) > 25 else query)

    plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)')
    plt.ylabel('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º—Å, –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)')
    plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True, alpha=0.3)
    plt.xscale('log')
    plt.yscale('log')

    plt.tight_layout()
    plt.show()



def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞"""

    run_benchmarks()
    generate_report()
    plot_performance_charts()


if __name__ == "__main__":
    main()